//$Id$
package xml;

/*
 * File:           DataDictionaryParser.java
 * Generated from: data-dictionary.dtd
 * Date:           March 12, 2003  12:23 PM
 *
 * @author  suresh
 * @version generated by NetBeans XML module
 * Copyright (c) 1996-2002 AdventNet, Inc. All Rights Reserved.
 * Please read the associated COPYRIGHTS file for more details.
 *
 * ADVENTNET, INC. MAKES NO REPRESENTATIONS OR WARRANTIES  ABOUT THE
 * SUITABILITY OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT. ADVENTNET, INC. SHALL
 * NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF
 * USING, MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */

/**
 * This is a scanner of DOM tree.
 *
 * Example:
 * <pre>
 *     javax.xml.parsers.DocumentBuilderFactory builderFactory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
 *     javax.xml.parsers.DocumentBuilder builder = builderFactory.newDocumentBuilder();
 *     org.w3c.dom.Document document = builder.parse (new org.xml.sax.InputSource (???));
 *     <font color="blue">DataDictionaryParser scanner = new DataDictionaryParser (document);</font>
 *     <font color="blue">scanner.visitDocument();</font>
 * </pre>
 *
 * @see org.w3c.dom.Document
 * @see org.w3c.dom.Element
 * @see org.w3c.dom.NamedNodeMap
 *
 */

import java.io.File;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.xml.sax.InputSource;

import com.adventnet.db.persistence.metadata.AllowedValues;
import com.adventnet.db.persistence.metadata.ColumnDefinition;
import com.adventnet.db.persistence.metadata.DataDictionary;
import com.adventnet.db.persistence.metadata.ForeignKeyColumnDefinition;
import com.adventnet.db.persistence.metadata.ForeignKeyDefinition;
import com.adventnet.db.persistence.metadata.IndexDefinition;
import com.adventnet.db.persistence.metadata.MetaDataEntityResolver;
import com.adventnet.db.persistence.metadata.MetaDataErrorHandler;
import com.adventnet.db.persistence.metadata.MetaDataException;
import com.adventnet.db.persistence.metadata.PrimaryKeyDefinition;
import com.adventnet.db.persistence.metadata.TableDefinition;
import com.adventnet.db.persistence.metadata.UniqueKeyDefinition;
import com.adventnet.db.persistence.metadata.UniqueValueGeneration;
import com.adventnet.db.persistence.metadata.parser.ParserUtil;
import com.adventnet.db.persistence.metadata.util.MetaDataUtil;
import com.adventnet.ds.query.util.QueryUtil;
import com.adventnet.persistence.DataObject;
import com.adventnet.persistence.Row;
import com.adventnet.persistence.xml.Xml2DoConverter;
import com.adventnet.sas.provisioning.Configuration;

public class DataDictionaryParser 
{
    private static final Logger LOGGER = Logger.getLogger(DataDictionaryParser.class.getName());
    private static boolean onSAS = false;
    private static List nonUVGTables = null;
    
    /** org.w3c.dom.Document document */
    org.w3c.dom.Document document;
    
    /** URL from where the data-dictionary.xml is read from */
    private String url = null;
    
    DataDictionary dd = null;
    
    /** Create new DataDictionaryParser with org.w3c.dom.Document. */
    public DataDictionaryParser(org.w3c.dom.Document document) 
    {
        this.document = document;
    }
    
    public DataDictionaryParser(org.w3c.dom.Document document, String url)
    {
        this.document = document;
        this.url = url;
    }
    
    public static void setValueForOnSAS(boolean checkBasedOnSAS)
    {
        onSAS = checkBasedOnSAS;
    }
    
    public static void setTablesWithoutUVGColsInPK(List tableNameList)
    {
        nonUVGTables = tableNameList;
    }
    
    public static boolean canBeIgnored(String tableName)
    {
        return (onSAS ? nonUVGTables.contains(tableName) : true);
    }

    void removeUniquePK(TableDefinition tabDef) throws MetaDataException
    {
        PrimaryKeyDefinition pkDef = tabDef.getPrimaryKey();
        List colList = pkDef.getColumnList();
        List uniquKeys =  tabDef.getUniqueKeys();
        if(uniquKeys != null)
        {
            for (int index=0;index < uniquKeys.size();index++)
            {
                    UniqueKeyDefinition unq = (UniqueKeyDefinition) uniquKeys.get(index);
                    List columns = unq.getColumns();
                    checkLoop : if(columns != null && columns.size() == colList.size())
                    {
                        Iterator iterator = colList.iterator();
                        while (iterator.hasNext())
                        {
                            if(!columns.contains(iterator.next()))
                            {
                                break checkLoop;
                            }
                        }
                        //since same check is done and logged by AnsiSQL Generator
                        LOGGER.log(Level.WARNING, "A column cannot have a unique constraint as true, if it alone participates in the PKDefinition of that tableDefinition. TableName :: [{0}], columnNames :: [{1}]", new Object[]{pkDef.getTableName(), columns});
                        tabDef.removeUniqueKey(unq.getName());
//                        throw new MetaDataException("A column cannot have a unique constraint as true, if it alone participates in the PKDefinition of that tableDefinition. TableName :: [" + pkDef.getTableName() + "], columnNames :: [" + columns + "]");
                    }
            }
        }
    }    
        
    /** Scan through org.w3c.dom.Document document. */
    public void parseDocument() throws MetaDataException
    {
        parseDocument(null);
    }

    /** Scan through org.w3c.dom.Document document(keeping MetaDataCache & newDD as base in KF relation). */
    public void parseDocument(DataDictionary newDD) throws MetaDataException
    {
        org.w3c.dom.Element element = document.getDocumentElement();
        if ((element != null) && element.getTagName().equals("data-dictionary"))
        {
            dd = newDD;
            getDataDictionary(element);
            LOGGER.fine("DD :: " + dd);
        }
    }
    
    public DataDictionary getDataDictionary()
    {
        return dd;
    }
    /** Scan through org.w3c.dom.Element named data-dictionary. */
    DataDictionary getDataDictionary(org.w3c.dom.Element element) throws MetaDataException{ // <data-dictionary>
        // element.getValue();
        org.w3c.dom.NamedNodeMap attrs = element.getAttributes();
        String ddName = null;
        String templateMetaHandler = null;
        for (int i = 0; i < attrs.getLength(); i++) {
            org.w3c.dom.Attr attr = (org.w3c.dom.Attr)attrs.item(i);
            if (attr.getName().equals("name"))
            { // <data-dictionary name="???">
                ddName = attr.getValue();
            }
            else if (attr.getName().equals("template-meta-handler"))
            {
                templateMetaHandler = attr.getValue();
            }
        }
        if (dd == null)
        {
            dd = new DataDictionary(ddName, url, templateMetaHandler);
        }
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        int length = nodes.getLength();
        for (int i = 0; i < length; i++) {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
                case org.w3c.dom.Node.CDATA_SECTION_NODE:
                    // ((org.w3c.dom.CDATASection)node).getData();
                    break;
                case org.w3c.dom.Node.ELEMENT_NODE:
                    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                    String tagName = nodeElement.getTagName();
                    if(tagName.equals("description")){
                        String description = ParserUtil.getTextNodeVal(nodeElement);
                        dd.setDescription(description);
                    }
                    else if (tagName.equals("table")) {
                        TableDefinition td = getTableDefinition(nodeElement);
                        removeUniquePK(td);
                        dd.addTableDefinition(td);
                        td.setModuleName(dd.getName());
                    }
                    break;
                case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
                    // ((org.w3c.dom.ProcessingInstruction)node).getData();
                    break;
            }
        }
        return dd;
    }

    /** Scan through org.w3c.dom.Element named table. */
    TableDefinition getTableDefinition(org.w3c.dom.Element element) throws MetaDataException{ // <table>
        // element.getValue();
        
    	TableDefinition td = null;
        org.w3c.dom.NamedNodeMap attrs = element.getAttributes();
        org.w3c.dom.Attr sys = (org.w3c.dom.Attr)attrs.getNamedItem("system");
        boolean isSystem =  true;
        org.w3c.dom.Attr dirtyWriteCheck = (org.w3c.dom.Attr)attrs.getNamedItem("dirty-write-check-columns");
        if (dirtyWriteCheck != null)
        {
          td = new TableDefinition(isSystem, true, dirtyWriteCheck.getValue());
        }
        else
        {
          td = new TableDefinition(isSystem);
        }
        for (int i = 0; i < attrs.getLength(); i++) {
            org.w3c.dom.Attr attr = (org.w3c.dom.Attr)attrs.item(i);
            if (attr.getName().equals("name")) { // <table name="???">
                String name = attr.getValue();
                int nameLength = name.length();
                if (nameLength > 30)
                {
                    throw new MetaDataException("The tableName [" + name + "] has [" + nameLength + "] characters but it should not exceed 25.");
                }
                // if this table is defined as a dominant-table for any personality then persistence would create 
                // a table with the name "tableName_PIDX" and FK with the name "PIDXtableName_FK" hence warns if the table Name exceeds 20.
                td.setTableName(name);
                // attr.getValue();
            }
            else if (attr.getName().equals("display-name")) { // <table display-name="???">
                String name = attr.getValue();
                td.setDisplayName(name);
                // attr.getValue();
            }
            /*else if (attr.getName().equals("template")) { // <table template="???">
                String name = attr.getValue();
                td.setTemplateName(name);
            }*/
            else if (attr.getName().equals("template")) {
                td.setTemplate(Boolean.parseBoolean(attr.getValue()));
            }
        }
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        int length = nodes.getLength();
        for (int i = 0; i < length; i++) {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
                case org.w3c.dom.Node.CDATA_SECTION_NODE:
                    // ((org.w3c.dom.CDATASection)node).getData();
                    break;
                case org.w3c.dom.Node.ELEMENT_NODE:
                    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                    String tagName = nodeElement.getTagName();
                    if(tagName.equals("description")){
                        String description = ParserUtil.getTextNodeVal(nodeElement);
                        td.setDescription(description);
                    }
                    else if (tagName.equals("columns")) {
                        /*Change this to "addColumnDefinition"!!*/
                        parseColumnDefinitions(td,nodeElement);
                        //td.setColumnList(columnList);
                    }
                    else if (tagName.equals("primary-key")) {
                        PrimaryKeyDefinition pkd = getPrimaryKey(td,nodeElement);
                        pkd.setTableName(td.getTableName());
                        td.setPrimaryKey(pkd);
                    }
                    else if (tagName.equals("foreign-keys")) {
                        parseForeignKeys(td,nodeElement);
                    }
                    //Support for uniqueness across columns.
                    else if (tagName.equals("unique-keys")) {
                        parseUniqueKeys(td,nodeElement);
                    }
                    else if(tagName.equals("indexes"))
                    {
                        parseIndexes(td,nodeElement);
                    }
 
                    break;
                case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
                    // ((org.w3c.dom.ProcessingInstruction)node).getData();
                    break;
            }
        }
        
        // Validating the NAME_COLUMN of the UVH Column (if any)
        List colNames = td.getColumnNames();
        Iterator colIterator = colNames.iterator();
        while (colIterator.hasNext())
        {
            ColumnDefinition cd = td.getColumnDefinitionByName((String) colIterator.next());
            UniqueValueGeneration uvg = cd.getUniqueValueGeneration();
            if (uvg != null)
            {
                String nameColumn = uvg.getNameColumn();
                if (nameColumn != null)
                {
                    if (!colNames.contains(nameColumn))
                    {
                        throw new MetaDataException("No Such Column [" + nameColumn + "] Specified in this TableDefinition :: [" + td.getTableName() + "] but specified in the UniqueValueGeneration.");
                    }
                    boolean valid = false;
                    List uniqueKeys = td.getUniqueKeys();
                    if (uniqueKeys != null)
                    {
                        for (int i = 0; i < uniqueKeys.size(); i++)
                        {
                            UniqueKeyDefinition ukDef = (UniqueKeyDefinition) uniqueKeys.get(i);
                            List ukCols = ukDef.getColumns();
                            if (ukCols.size() == 1 && ukCols.get(0).equals(nameColumn))
                            {
                                valid = true;
                                break;
                            }
                        }
                    }
                    if (!valid)
                    {
                        throw new MetaDataException("Column [" + nameColumn + "] of the table [" + td.getTableName() + "], which is specified as NAME_COLUMN should be UNIQUE.");
                    }
                }
                break;
            }
        }
        return td;
    }
    
    /** Scan through org.w3c.dom.Element named columns. */
    void parseColumnDefinitions(TableDefinition td, org.w3c.dom.Element element) throws MetaDataException{ // <columns>
        // element.getValue();
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        int length = nodes.getLength();
        for (int i = 0; i < length; i++) {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
                case org.w3c.dom.Node.CDATA_SECTION_NODE:
                    // ((org.w3c.dom.CDATASection)node).getData();
                    break;
                case org.w3c.dom.Node.ELEMENT_NODE:
                    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                    if (nodeElement.getTagName().equals("column")) {
                        ColumnDefinition cd = getColumnDefinition(td, nodeElement);
                        cd.setTableName(td.getTableName());
                        td.addColumnDefinition(cd);
                    }
                    break;
                case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
                    // ((org.w3c.dom.ProcessingInstruction)node).getData();
                    break;
            }
        }
    }
    
    /** Scan through org.w3c.dom.Element named column. */
    ColumnDefinition getColumnDefinition(TableDefinition td, 
                                         org.w3c.dom.Element element) 
    throws MetaDataException { // <column>
        // element.getValue();
        ColumnDefinition  cd = new ColumnDefinition();
        org.w3c.dom.NamedNodeMap attrs = element.getAttributes();
        for (int i = 0; i < attrs.getLength(); i++) {
            org.w3c.dom.Attr attr = (org.w3c.dom.Attr)attrs.item(i);
            if (attr.getName().equals("name")) { // <column name="???">
                String name = attr.getValue();
                ColumnDefinition oldCd = td.getColumnDefinitionByName(name);
                if(oldCd != null)
                {
                    throw new MetaDataException("Column with name " + name + 
                    " is already defined in table " + td.getTableName() + 
                    " . Please use unique column names within a table definition");
                }
                int nameLength = name.length();
                if (nameLength > 30)
                {
                    LOGGER.log(Level.WARNING, "The columnName :: [{0}] of tableName :: [{1}] has [{2}] characters.", new Object[]{name, td.getTableName(), new Integer(nameLength)});
                    throw new MetaDataException("The columnName :: [" + name + "] of tableName :: [" + td.getTableName() + "] has [" + nameLength + "] characters.");
                }
                cd.setColumnName(name);
                // attr.getValue();
            }
            else if (attr.getName().equals("display-name")) { // <column display-name="???">
                String name = attr.getValue();
                cd.setDisplayName(name);
                // attr.getValue();
            }
            /*else if (attr.getName().equals("template")) { // <column template="???">
                String name = attr.getValue();
                cd.setTemplateName(name);
            }*/
        }
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        int length = nodes.getLength();
        for (int i = 0; i < length; i++) {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
                case org.w3c.dom.Node.CDATA_SECTION_NODE:
                    // ((org.w3c.dom.CDATASection)node).getData();
                    break;
                case org.w3c.dom.Node.ELEMENT_NODE:
                    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                    String tagName = nodeElement.getTagName();
                    if(tagName.equals("description")){
                        String description = ParserUtil.getTextNodeVal(nodeElement);
                        cd.setDescription(description);
                    }
                    else if (tagName.equals("data-type")) {
                        String dataType = getDataType(nodeElement);
                        cd.setDataType(dataType);
                        int sqlType = QueryUtil.getJavaSQLType(dataType);
                        cd.setSQLType(sqlType);
                    }
                    else if (tagName.equals("precision")) {
                        if (!(cd.getDataType().equals("FLOAT") || cd.getDataType().equals("DOUBLE") || cd.getDataType().equals("DECIMAL")))
                        {
                            throw new MetaDataException("Precision can be set only for FLOAT/DOUBLE/DECIMAL Datatypes - Here the datatype is [" + cd.getDataType() + "] for the column [" + td.getTableName() + "." + cd.getColumnName() + "]");
                        }
                        int precision = getPrecision(nodeElement);
                        if (precision < 0)
                        {
                            throw new MetaDataException("precision cannot have negative value. Check [" + td.getTableName() + "." + cd.getColumnName() + "]");
                        }
                        if (cd.getMaxLength() < (precision + 2))
                        {
                            throw new MetaDataException("max-size for the column [" + td.getTableName() + "." + cd.getColumnName() + "] should be more than [" + (precision + 2) + "] when its precision is [" + precision + "].");
                        }
                        cd.setPrecision(precision);
                    }
                    else if (tagName.equals("max-size")) {
                        int maxLength = getMaxLength(nodeElement);
                        cd.setMaxLength(maxLength);
                    }
                    else if (tagName.equals("default-value")) {
                        String defVal = getDefaultValue(nodeElement);
                        cd.setDefaultValue(defVal);
                    }
                    else if (tagName.equals("nullable")) {
                        boolean nullable = isNullable(nodeElement);
                        cd.setNullable(nullable);
                    }
                    else if (tagName.equals("unique")) {
                        boolean unique = isUnique(nodeElement);
                        if (unique)
                        {
                            UniqueKeyDefinition ukd = new UniqueKeyDefinition();
                            List ukList = td.getUniqueKeys();
                            int ukNo =  ukList == null ? 0 : ukList.size();
                            ukd.setName(td.getTableName()+"_UK" + ukNo);
                            ukd.addColumn(cd.getColumnName());
                            td.addUniqueKey(ukd);
                        }
                        cd.setUnique(unique);
                    }
                    else if (tagName.equals("allowed-values")) {
						AllowedValues av = getAllowedValues(nodeElement,cd);
                        cd.setAllowedValues(av);
                    }
                    else if (tagName.equals("uniquevalue-generation")) 
                    {
                        UniqueValueGeneration generation = getUniqueValueGeneration(nodeElement);
                        cd.setUniqueValueGeneration(generation);
                    }
                    break;
            case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
                // ((org.w3c.dom.ProcessingInstruction)node).getData();
                break;
            }
        }
        if (cd.getDataType().equals("CHAR") && cd.getMaxLength() == 0)
        {
            cd.setMaxLength(50);
        }
        if (cd.getDataType().equals("BLOB") && cd.getDefaultValue() != null)
        {
            throw new IllegalArgumentException("Default Value [" + cd.getDefaultValue() + "] cannot be assinged to 'BLOB' column :: [" + cd.getTableName() + "." + cd.getColumnName() + "]");
        }
        if (cd.getDataType().equals("CHAR") && cd.getMaxLength() > 255 && cd.getDefaultValue() != null)
        {
            throw new IllegalArgumentException("Default Value [" + cd.getDefaultValue() + "] cannot be assinged to 'CHAR' column with Max-Size is greater than 255 :: [" + cd.getTableName() + "." + cd.getColumnName() + "]");
        }
        return cd;
    }
    
    /** Scan through org.w3c.dom.Element named data-type. */
    String getDataType(org.w3c.dom.Element element) { // <data-type>
        return ParserUtil.getTextNodeVal(element);
    }
    
    /** Scan through org.w3c.dom.Element named maxlength. */
    int getMaxLength(org.w3c.dom.Element element) { // <maxlength>
        return getTextNodeValAsInt(element);
    }
    
    /** Scan through org.w3c.dom.Element named Precision. */
    int getPrecision(org.w3c.dom.Element element) {
        return getTextNodeValAsInt(element);
    }

    /** Scan through org.w3c.dom.Element named default-value. */
    String getDefaultValue(org.w3c.dom.Element element) { // <default-value>
        return getTextNodeVal(element);
    }
    
    /** Scan through org.w3c.dom.Element named nullable. */
    boolean isNullable(org.w3c.dom.Element element) { // <nullable>
        return getTextNodeValAsBoolean(element);
    }
    
    /** Scan through org.w3c.dom.Element named unique. */
    boolean isUnique(org.w3c.dom.Element element) { // <unique>
        return getTextNodeValAsBoolean(element);
    }
    
    /** Scan through org.w3c.dom.Element named allowed-values. */
    AllowedValues getAllowedValues(org.w3c.dom.Element element, ColumnDefinition cd) throws MetaDataException
    { // <allowed-values>
		String dataType = cd.getDataType();
		AllowedValues av = new AllowedValues();
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        int length = nodes.getLength();
        for (int i = 0; i < length; i++) {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
                case org.w3c.dom.Node.CDATA_SECTION_NODE:
                    // ((org.w3c.dom.CDATASection)node).getData();
                    break;
                case org.w3c.dom.Node.ELEMENT_NODE:
                    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                    String tagName = nodeElement.getTagName();
                    if (tagName.equals("from")) {
                        String fromVal = getFrom(nodeElement);
					Object setVal=MetaDataUtil.convert(fromVal,dataType);
					av.setFromVal(setVal);
                    }
                    else if (tagName.equals("to")) {
						String toVal = getTo(nodeElement);
						Object setVal=MetaDataUtil.convert(toVal,dataType);
						av.setToVal(setVal);

					}
					else if (tagName.equals("value")) {
						String value = getValue(nodeElement);
						Object setVal=MetaDataUtil.convert(value, dataType);
						av.addValue(setVal);

					}
					else if (tagName.equals("pattern")) {
						String pattern = getPattern(nodeElement);
						av.setPattern(pattern);
					}
                    break;
                case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
                    // ((org.w3c.dom.ProcessingInstruction)node).getData();
                    break;
            }
        }
        return av;
    }
    /** Scan through org.w3c.dom.Element named from. */
    String getFrom(org.w3c.dom.Element element) { // <from>
        return ParserUtil.getTextNodeVal(element);
    }
    
    /** Scan through org.w3c.dom.Element named to. */
    String getTo(org.w3c.dom.Element element) { // <to>
        return ParserUtil.getTextNodeVal(element);
    }
    
    /** Scan through org.w3c.dom.Element named value. */
    String getValue(org.w3c.dom.Element element) { // <value>
        return ParserUtil.getTextNodeVal(element);
    }

	/** Scan through org.w3c.dom.Element named pattern. */
	String getPattern(org.w3c.dom.Element element) { // <pattern>
		return ParserUtil.getTextNodeVal(element);
	}

    /** Scan through org.w3c.dom.Element named primary-key. */
    UniqueKeyDefinition getUniqueKey(TableDefinition td, org.w3c.dom.Element element) throws MetaDataException{ // <unique-key>
        UniqueKeyDefinition ukd = null;
        // element.getValue();
        org.w3c.dom.NamedNodeMap attrs = element.getAttributes();
        for (int i = 0; i < attrs.getLength(); i++) {
            org.w3c.dom.Attr attr = (org.w3c.dom.Attr)attrs.item(i);
            if (attr.getName().equals("name")) { // <primary-key name="???">
                String name = attr.getValue();
                ukd = new UniqueKeyDefinition();
                ukd.setName(name);
                // attr.getValue();
            }
        }
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        int length = nodes.getLength();
        for (int i = 0; i < length; i++) {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
                case org.w3c.dom.Node.CDATA_SECTION_NODE:
                    // ((org.w3c.dom.CDATASection)node).getData();
                    break;
                case org.w3c.dom.Node.ELEMENT_NODE:
                    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                    if (nodeElement.getTagName().equals("unique-key-column")) {
                        String columnName = ParserUtil.getTextNodeVal(nodeElement);
                        ColumnDefinition cd = td.getColumnDefinitionByName(columnName);
                        if (cd == null)
                        {
                        	throw new MetaDataException("No such columnName [" + columnName + "] in this table :: [" + td.getTableName() + "], but this has been specified in the UniqueKey :: [" + ukd.getName() + "]");
                        }
                        if (cd.getDataType().equals("BLOB"))
                        {
                            throw new IllegalArgumentException("BLOB Column [" + cd.getTableName() + "." + cd.getColumnName() + "] cannot be participate in Unique Key Constraint [" + ukd.getName() + "]");
                        }
                        if (cd.getDataType().equals("CHAR") && cd.getMaxLength() > 255)
                        {
                            throw new IllegalArgumentException("CHAR Column [" + cd.getTableName() + "." + cd.getColumnName() + "] with max-size greater than 255 cannot be participate in Unique Key Constraint [" + ukd.getName() + "]");
                        }
                        ukd.addColumn(columnName);
                    }
                    break;
                case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
                    // ((org.w3c.dom.ProcessingInstruction)node).getData();
                    break;
            }
        }
        return ukd;
    }
 
    
    /** Scan through org.w3c.dom.Element named primary-key. */
    IndexDefinition getIndex(TableDefinition td, org.w3c.dom.Element element) throws MetaDataException{ // <unique-key>
        IndexDefinition ikd = null;
        // element.getValue();
        org.w3c.dom.NamedNodeMap attrs = element.getAttributes();
        for (int i = 0; i < attrs.getLength(); i++) {
            org.w3c.dom.Attr attr = (org.w3c.dom.Attr)attrs.item(i);
            if (attr.getName().equals("name")) { // <primary-key name="???">
                String name = attr.getValue();
                ikd = new IndexDefinition();
                ikd.setName(name);
                // attr.getValue();
            }
        }
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        int length = nodes.getLength();
        for (int i = 0; i < length; i++) {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
                case org.w3c.dom.Node.CDATA_SECTION_NODE:
                    // ((org.w3c.dom.CDATASection)node).getData();
                    break;
                case org.w3c.dom.Node.ELEMENT_NODE:
                    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                    if (nodeElement.getTagName().equals("index-column")) {
                        String columnName = ParserUtil.getTextNodeVal(nodeElement);
                        ColumnDefinition cd = td.getColumnDefinitionByName(columnName);
                        if (cd == null)
                        {
                        	throw new MetaDataException("No such columnName [" + columnName + "] in this table :: [" + td.getTableName() + "], but this has been specified in the UniqueKey :: [" + ikd.getName() + "]");
                        }
                        if (cd.getDataType().equals("BLOB"))
                        {
                            throw new IllegalArgumentException("BLOB Column [" + cd.getTableName() + "." + cd.getColumnName() + "] cannot be participate in Index Constraint [" + ikd.getName() + "]");
                        }
                        if (cd.getDataType().equals("CHAR") && cd.getMaxLength() > 255)
                        {
                            throw new IllegalArgumentException("CHAR Column [" + cd.getTableName() + "." + cd.getColumnName() + "] with max-size greater than 255 cannot be participate in Index Constraint [" + ikd.getName() + "]");
                        }
                        ikd.addColumn(columnName);
                    }
                    break;
                case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
                    // ((org.w3c.dom.ProcessingInstruction)node).getData();
                    break;
            }
        }
        return ikd;
    }
 
    /** Scan through org.w3c.dom.Element named primary-key. */
    PrimaryKeyDefinition getPrimaryKey(TableDefinition td, org.w3c.dom.Element element) throws MetaDataException{ // <primary-key>
        PrimaryKeyDefinition pkd = null;
        // element.getValue();
        org.w3c.dom.NamedNodeMap attrs = element.getAttributes();
        for (int i = 0; i < attrs.getLength(); i++) {
            org.w3c.dom.Attr attr = (org.w3c.dom.Attr)attrs.item(i);
            if (attr.getName().equals("name")) { // <primary-key name="???">
                String name = attr.getValue();
                pkd = new PrimaryKeyDefinition();
                int nameLength = name.length();
                if (nameLength > 30)
                {
                    LOGGER.log(Level.WARNING, "The PKName :: {0} of tableName :: {1} has {2} characters.", new Object[]{name, td.getTableName(), new Integer(nameLength)});
                    throw new MetaDataException("The columnName :: [" + name + "] of tableName :: [" + td.getTableName() + "] has [" + nameLength + "] characters.");
                }
                pkd.setName(name);
                // attr.getValue();
            }
        }
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        int length = nodes.getLength();
        boolean pkHasNoBIGINT_UVGCol = true;
        for (int i = 0; i < length; i++) {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
                case org.w3c.dom.Node.CDATA_SECTION_NODE:
                    // ((org.w3c.dom.CDATASection)node).getData();
                    break;
                case org.w3c.dom.Node.ELEMENT_NODE:
                    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                    if (nodeElement.getTagName().equals("primary-key-column")) {
                        String columnName = getPrimaryKeyColumn(nodeElement);
                        ColumnDefinition cd = td.getColumnDefinitionByName(columnName);
                         if(cd == null)
                         {
                             throw new MetaDataException("UnKnown Column Name specified " + 
                                columnName + " in Primary Key definition for " + td.getTableName());
                         }
                        cd.setKey(true);
                        if (cd.getDataType().equals("BIGINT"))// && cd.getUniqueValueGeneration() != null)
                        {
                            pkHasNoBIGINT_UVGCol = false;
                        }
                        if (cd.getDataType().equals("BLOB"))
                        {
                            throw new IllegalArgumentException("BLOB Column [" + pkd.getTableName() + "." + cd.getColumnName() + "] cannot be participate in Primary Key Constraint [" + pkd.getName() + "]");
                        }
                        if (cd.getDataType().equals("CHAR") && cd.getMaxLength() > 255)
                        {
                            throw new IllegalArgumentException("CHAR Column [" + pkd.getTableName() + "." + cd.getColumnName() + "] with max-size greater than 255 cannot be participate in Primary Key Constraint [" + pkd.getName() + "]");
                        }
                        pkd.addColumnName(columnName);
                        //pkd.setColumnList(columnList);
                    }
                    break;
                case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
                    // ((org.w3c.dom.ProcessingInstruction)node).getData();
                    break;
            }
        }
        if (pkHasNoBIGINT_UVGCol)
        {
            if (!canBeIgnored(td.getTableName()))
            {
                LOGGER.log(Level.WARNING, "TableName :: [{0}] has no BIGINT Column in its PK.", td.getTableName());
//                throw new MetaDataException("DD Guidelines has been violated. TableName :: [" + td.getTableName() + "] has no BIGINT UVG Column in its PK.");
            }
        }
        return pkd;
    }
    
    /** Scan through org.w3c.dom.Element named primary-key-column. */
    String getPrimaryKeyColumn(org.w3c.dom.Element element) { // <primary-key-column>
        return ParserUtil.getTextNodeVal(element);
    }
    
    /** Scan through org.w3c.dom.Element named foreign_keys. */
    void parseForeignKeys(TableDefinition td, org.w3c.dom.Element element) 
        throws MetaDataException{ // <foreign_keys>
        // element.getValue();
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        int length = nodes.getLength();
        for (int i = 0; i < length; i++) {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
                case org.w3c.dom.Node.CDATA_SECTION_NODE:
                    // ((org.w3c.dom.CDATASection)node).getData();
                    break;
                case org.w3c.dom.Node.ELEMENT_NODE:
                    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                    if (nodeElement.getTagName().equals("foreign-key")) {
                        ForeignKeyDefinition fkd = getForeignKey(td,nodeElement);
                        td.addForeignKey(fkd);
                    }
                    break;
                case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
                    // ((org.w3c.dom.ProcessingInstruction)node).getData();
                    break;
            }
        }
    }
     
    /** Scan through org.w3c.dom.Element named unique-columns. */
    void parseUniqueKeys(TableDefinition td, org.w3c.dom.Element element) 
        throws MetaDataException{ // <unique_columns>
        // element.getValue();
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        int length = nodes.getLength();
        for (int i = 0; i < length; i++) {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
                case org.w3c.dom.Node.CDATA_SECTION_NODE:
                    // ((org.w3c.dom.CDATASection)node).getData();
                    break;
                case org.w3c.dom.Node.ELEMENT_NODE:
                    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                    if (nodeElement.getTagName().equals("unique-key")) {
                        UniqueKeyDefinition ukd = getUniqueKey(td,nodeElement);
                        String tableName = td.getTableName();
                        //List ukList = td.getUniqueKeys();
                        //String ukName = tableName + "_UK" + (ukList == null ? "0" : String.valueOf(ukList.size()));
                        String ukName = ukd.getName();
                        if (ukName.length() > 30)
                        {
                            LOGGER.log(Level.WARNING, "The unique-key name [{1}] for table [{0}] exceeds 30 characters.", new Object[]{tableName, ukName});
                            throw new MetaDataException("The unique-key name [" + ukName + "] for table [" + tableName + "] exceeds 30 characters.");
//                            ukName = tableName + "_UK" + (ukList == null ? "0" : String.valueOf(ukList.size()));
//                            if (ukName.length() > 30)
//                            {
//                                LOGGER.log(Level.WARNING, "The TableName [{0}] has [{1}] characters but it should less than 25.", new Object[]{tableName, new Integer(tableName.length())});
////                                throw new MetaDataException("The TableName [" + tableName + "] has [" + tableName.length() + "] characters but it should less than 25.");
//                            }
//                            ukd.setName(ukName);
                        }
                        td.addUniqueKey(ukd);
                    }
                    break;
                case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
                    // ((org.w3c.dom.ProcessingInstruction)node).getData();
                    break;
            }
        }
    }
    
    
    /** Scan through org.w3c.dom.Element named unique-columns. */
    void parseIndexes(TableDefinition td, org.w3c.dom.Element element) 
        throws MetaDataException{ // <unique_columns>
        // element.getValue();
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        int length = nodes.getLength();
        for (int i = 0; i < length; i++) {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
                case org.w3c.dom.Node.CDATA_SECTION_NODE:
                    // ((org.w3c.dom.CDATASection)node).getData();
                    break;
                case org.w3c.dom.Node.ELEMENT_NODE:
                    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                    if (nodeElement.getTagName().equals("index")) {
                        IndexDefinition id = getIndex(td,nodeElement);
                        String tableName = td.getTableName();
                        String indexName = id.getName();
                        if (indexName.length() > 30)
                        {
                            LOGGER.log(Level.WARNING,"Index definition [{0}] for table [{1}] has more than 30 characters. It should be less than 30", new Object[] {indexName, tableName});
                            throw new MetaDataException("Index definition [" + indexName + "] for table [" + tableName + "] has more than 30 characters. It should be less than 30");
                        }
                        //We'll create implicit Index for PK,FK and UK columns. So, if there is any explicit
                        //Index defined for those columns,such definition has to be ignored!
                        List columns = id.getColumns();
                        PrimaryKeyDefinition pkd = td.getPrimaryKey();
                        List pkColumns = pkd.getColumnList();
                        
                        boolean addThisIndex = true;
                        if(columns.equals(pkColumns))
                        {
                            LOGGER.log(Level.WARNING,"Ignoring the index definition [{0}] for table [{1}] as it redefines the Primary Keys", new Object[] {indexName, tableName});
//                            throw new MetaDataException("Ignoring the index definition [" + indexName + "] for table [" + tableName + "] as it redefines the Primary Keys");
                            addThisIndex = false;
                        }
                        else
                        {
                            List fks = td.getForeignKeyList();
                            if(fks != null)
                            {
                                int fkSize = fks.size();
                                for(int f = 0; f < fkSize; f++)
                                {
                                    ForeignKeyDefinition fkd = (ForeignKeyDefinition) fks.get(f);
                                    List fkCols = fkd.getFkColumns();
                                    if(columns.equals(fkCols))
                                    {
                                        LOGGER.log(Level.WARNING,"Ignoring the index definition {0} for table {1} as it redefines the Foreign Key {2}", new Object[] {indexName, tableName,fkd.getName()});
//                                        throw new MetaDataException("Ignoring the index definition [" + indexName + "] for table [" + tableName + "] as it redefines the Foreign Key [" + fkd.getName() + "]");
                                        addThisIndex = false;
                                        break;
                                    }
                                }
                            }
                            
                            //Check for duplicate indexes too?
                            List ids = td.getIndexes();
                            if(ids != null)
                            {
                                int idSize = ids.size();
                                for(int ii = 0; ii < idSize; ii++)
                                {
                                    IndexDefinition iDef = (IndexDefinition) ids.get(ii);
                                    List idCols = iDef.getColumns();
                                    if(columns.equals(idCols))
                                    {
                                        LOGGER.log(Level.WARNING,"Ignoring the index definition [{0}] for table [{1}] as it redefines the Index [{2}]", new Object[] {indexName, tableName,iDef.getName()});
//                                        throw new MetaDataException("Ignoring the index definition [" + indexName + "] for table [" + tableName + "] as it redefines the Index [" + iDef.getName() + "]");
                                        addThisIndex = false;
                                        break;
                                    }
                                }
                            }
                        }
                        //id.setName(ukName);
                        if(addThisIndex)
                        {
                            td.addIndex(id);
                        }
                    }
                    break;
                case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
                    // ((org.w3c.dom.ProcessingInstruction)node).getData();
                    break;
            }
        }
    }
    /** Scan through org.w3c.dom.Element named foreign_key. */
    ForeignKeyDefinition getForeignKey(TableDefinition td,
                                       org.w3c.dom.Element element) 
                                       throws MetaDataException{ // <foreign_key>
        // element.getValue();
        ForeignKeyDefinition fk = null;
        //TableDefinition rtd = null;
        
        List pkColsOfMasterTable = null;
        
        org.w3c.dom.NamedNodeMap attrs = element.getAttributes();

        // Process name attribute first <foreign_key name="???">
        org.w3c.dom.Attr nameAttr = (org.w3c.dom.Attr)attrs.getNamedItem("name");
        //TODO: Think whether this check is not needed, as this will
        //be done by DTD itself.
        if (nameAttr == null)
        {
            throw new MetaDataException ("Atleast one foreign key definition in the table " + td.getTableName() + " does not have name attribute");
        }
        else
        {
            String name = nameAttr.getValue();
            fk = new ForeignKeyDefinition();
            int nameLength = name.length();
            // Though in Mysql persistence creates "FKName_IDX0" Mysql doesn't care about the Name Length
            if (nameLength > 30)
            {
                LOGGER.log(Level.WARNING, "The FKName :: [{0}] of tableName :: [{1}] has [{2}] characters.", new Object[]{name, td.getTableName(), new Integer(nameLength)});
                throw new MetaDataException("The FKName :: [" + name + "] of tableName :: [" + td.getTableName() + new Integer(nameLength) + "] has [" + "] characters.");
            }
            fk.setName(name);
            fk.setSlaveTableName(td.getTableName());
            // nameAttr.getValue();
        }

        for (int i = 0; i < attrs.getLength(); i++) {
            org.w3c.dom.Attr attr = (org.w3c.dom.Attr)attrs.item(i);

            // name attribute is already processed
            if (attr.getName().equals("name")) { // <foreign_key name="???">
                continue;
            }
            
            String refTableName = null;
            if (attr.getName().equals("reference-table-name"))
            {
                refTableName = attr.getValue();
                fk.setMasterTableName(refTableName);
                TableDefinition rtd = dd.getTableDefinitionByName(refTableName);
                if (rtd == null)
                {
                    // This is done inorder to handle the SelfJoin support in data-dictionary.xml
                    if (refTableName.equals(td.getTableName()))
                    {
                        rtd = td;
                    }
                    else
                    {
                        rtd = MetaDataUtil.getTableDefinitionByName(refTableName);
                    }
                }
                if (rtd == null)
                {
                    throw new MetaDataException("Referring a non-existing tableName :: " + refTableName);
                }
                pkColsOfMasterTable = rtd.getPrimaryKey().getColumnList();
            }
            if (attr.getName().equals("isbidirectional")) 
            {
                String biDirStr = attr.getValue();
                boolean bidirectional = biDirStr.equalsIgnoreCase("true");
                fk.setBidirectional(bidirectional); 
            }
            if (attr.getName().equals("ignore-on-sas")) 
            {
                String ignoreStr = attr.getValue();
                boolean ignore = ignoreStr.equalsIgnoreCase("true");
                fk.setIgnoreOnSAS(ignore); 
            }
        }
        List fkLocalColumnNameList = null;
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        int length = nodes.getLength();
        for (int i = 0; i < length; i++) {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
                case org.w3c.dom.Node.CDATA_SECTION_NODE:
                    // ((org.w3c.dom.CDATASection)node).getData();
                    break;
                case org.w3c.dom.Node.ELEMENT_NODE:
                    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                    String tagName = nodeElement.getTagName();
                    if(tagName.equals("description")){
                        String description = ParserUtil.getTextNodeVal(nodeElement);
                        fk.setDescription(description);
                    }
                    else if (tagName.equals("fk-columns")) {
                        //parseFKColumns(td,rtd,fk,nodeElement);
                        parseFKColumns(td,fk,nodeElement);
                        
                    }
                    else if(tagName.equals("fk-constraints")) {
                        String constraintStr = getFKConstraints(nodeElement);
                        // If no constraint is specified, default
                        // (ON-DELETE-RESTRICT) will be assumed.
                        if (constraintStr != null)
                        {
                            try
                            {
                                int constraints = getIntVal(constraintStr);
                                fk.setConstraints(constraints);
                            }
                            catch(MetaDataException mde)
                            {
                                throw new MetaDataException (mde.getMessage() + " in table " + td.getTableName());
                            }
                        }
                    }
                    break;
                case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
                    // ((org.w3c.dom.ProcessingInstruction)node).getData();
                    break;
            }
        }
        fkLocalColumnNameList = fk.getFkRefColumns();
        if (!fkLocalColumnNameList.equals(pkColsOfMasterTable))
        {
            if (onSAS)
            {
                LOGGER.log(Level.WARNING, "TableName :: [{0}] FKName :: [{1}] doesnot refer a PrimaryKey.", new Object[]{td.getTableName(), fk.getName()});
//                throw new MetaDataException("DD Guidelines has been violated. TableName :: [" + td.getTableName() + "] FKName :: [" + fk.getName() + "] doesnot refer a PrimaryKey.");
            }
        }
        return fk;
    }
 
    private int getIntVal (String constraintStr) throws MetaDataException
    {
        if(constraintStr.equalsIgnoreCase("ON-DELETE-CASCADE"))
        {
            return ForeignKeyDefinition.ON_DELETE_CASCADE;
        }
        else if(constraintStr.equalsIgnoreCase("ON-DELETE-SET-DEFAULT"))
        {
            return ForeignKeyDefinition.ON_DELETE_SET_DEFAULT;
        }
        else if(constraintStr.equalsIgnoreCase("ON-DELETE-SET-NULL"))
        {
            return ForeignKeyDefinition.ON_DELETE_SET_NULL;
        }
        else if(constraintStr.equalsIgnoreCase("ON-DELETE-RESTRICT"))
        {
            return ForeignKeyDefinition.ON_DELETE_RESTRICT;
        }
        else
        {
            throw new MetaDataException("Unknown fk-constraint specified \"" + constraintStr +"\"");
        }
    }
    /** Scan through org.w3c.dom.Element named fk-columns. */
    void parseFKColumns(TableDefinition td, 
                        // TableDefinition rtd, 
                        ForeignKeyDefinition fk,
                        org.w3c.dom.Element element) throws MetaDataException{ // <fk-columns>
        // element.getValue();
        ForeignKeyColumnDefinition fkcd = null;
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        int length = nodes.getLength();
        for (int i = 0; i < length; i++) {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
                case org.w3c.dom.Node.CDATA_SECTION_NODE:
                    // ((org.w3c.dom.CDATASection)node).getData();
                    break;
                case org.w3c.dom.Node.ELEMENT_NODE:
                    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                    if (nodeElement.getTagName().equals("fk-column")) {
                        //fkcd = getFKColumnDefinition(td,rtd,fk,nodeElement);
                        fkcd = getFKColumnDefinition(td,fk,nodeElement);
                        fk.addForeignKeyColumns(fkcd);
                        //fkColumnList.add(fkcd);
                    }
                    break;
                case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                    // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
                    // ((org.w3c.dom.ProcessingInstruction)node).getData();
                    break;
            }
        }
    }
    
    /** Scan through org.w3c.dom.Element named fk-column. */
    ForeignKeyColumnDefinition getFKColumnDefinition(TableDefinition td,
                                                     //TableDefinition rtd,
                       ForeignKeyDefinition fk,
                       org.w3c.dom.Element element) throws MetaDataException{ // <fk-column>
        // element.getValue();
        ForeignKeyColumnDefinition fkcd = new ForeignKeyColumnDefinition();
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        ColumnDefinition cd = null;
        ColumnDefinition rcd = null;

        int length = nodes.getLength();
        for (int i = 0; i < length; i++) {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
                case org.w3c.dom.Node.CDATA_SECTION_NODE:
                    // ((org.w3c.dom.CDATASection)node).getData();
                    break;
                case org.w3c.dom.Node.ELEMENT_NODE:
                    org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                    String tagName = nodeElement.getTagName();
                    if (tagName.equals("fk-local-column")) {
                        String fkColumnName = getFKLocalColumnName(nodeElement);
                        cd = td.getColumnDefinitionByName(fkColumnName);
                        if(cd == null)
                        {
                            throw new MetaDataException("Unknown Column Name specified " + 
                            fkColumnName+ " in the Foreign Key Definition " + fk.getName()+
                            " for Table Definition " + td.getTableName());
                        }
                        if (cd.getDataType().equals("BLOB"))
                        {
                            throw new IllegalArgumentException("BLOB Column [" + fk.getSlaveTableName() + "." + cd.getColumnName() + "] cannot be participate in Foreign Key Constraint [" + fk.getName() + "]");
                        }
                        if (cd.getDataType().equals("CHAR") && cd.getMaxLength() > 255)
                        {
                            throw new IllegalArgumentException("CHAR Column [" + fk.getSlaveTableName() + "." + cd.getColumnName() + "] with max-size greater than 255 cannot be participate in Foreign Key Constraint [" + fk.getName() + "]");
                        }
                        
                        fkcd.setLocalColumnDefinition(cd);
                    }
                    else if (tagName.equals("fk-reference-column")) {
                        String refFKColumnName = getFKReferenceColumnName(nodeElement);
                        // rcd = rtd.getColumnDefinitionByName(refFKColumnName);
                        rcd = new ColumnDefinition();
                        rcd.setColumnName(refFKColumnName);
//                         if(rcd == null)
//                         {
//                             throw new MetaDataException("Unknown Column Name specified " + 
//                             refFKColumnName + " as reference column in the Foreign Key Definition " + 
//                             fk.getName()+
//                             " for Table Definition " + td.getTableName());
//                         }
                        
                        fkcd.setReferencedColumnDefinition(rcd);
                    }
                    break;
            case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                // ((org.w3c.dom.ProcessingInstruction)node).getTarget();
                // ((org.w3c.dom.ProcessingInstruction)node).getData();
                break;
            }
        
        }
        //Should not happen!!
            if(cd == null || rcd == null)
            {
                throw new MetaDataException("Error in Foreign Key definition: " + fk.getName() +
                                            " Either of local column or reference column not defined");
                
            }
            //moved to validateTableDefinition in MetaDataAccess
//             if(!(cd.matches(rcd)))
//             {
//                 throw new MetaDataException("Mismatch in the Foreign Key definition: " + 
//                                             "The datatype and/or size of columns "+ cd.getColumnName() + ", "+
//                                             rcd.getColumnName()+ " defined for Foreign Key " + fk.getName()+
//                                             " in table " + td.getTableName() + " does not match");
//             }
        return fkcd;
    }
    
    /** Scan through org.w3c.dom.Element named fk-local-column. */
    String getFKLocalColumnName(org.w3c.dom.Element element) { // <fk-local-column>
        return ParserUtil.getTextNodeVal(element);
    }
    
    /** Scan through org.w3c.dom.Element named fk-reference-column. */
    String getFKReferenceColumnName(org.w3c.dom.Element element) { // <fk-reference-column>
        return ParserUtil.getTextNodeVal(element);
    }
    
    /** Scan through org.w3c.dom.Element named fk-constraints. */
    String getFKConstraints(org.w3c.dom.Element element) { // <fk-constraints>
        return ParserUtil.getTextNodeVal(element);
    }

    protected TableDefinition getTableDefinitionByName(String tableName)
        throws MetaDataException
    {
        TableDefinition td = null;
        td = dd.getTableDefinitionByName(tableName);
        if( td == null)
        {
            td = MetaDataUtil.getTableDefinitionByName(tableName);
        }
        return td;
    }
    
    private ForeignKeyDefinition getForeignKeyDefinitionByName(String foreignKeyName)
        throws MetaDataException
    {
        ForeignKeyDefinition fd = null;
        fd = dd.getForeignKeyDefinitionByName(foreignKeyName);
        if(fd == null)
        {
            fd = MetaDataUtil.getForeignKeyDefinitionByName(foreignKeyName);
        }
        return fd;
    } 

    
    String getGeneratorName(org.w3c.dom.Element element) 
    { 
        return ParserUtil.getTextNodeVal(element);
    }
    
    UniqueValueGeneration getUniqueValueGeneration(org.w3c.dom.Element element) throws MetaDataException
    {
        UniqueValueGeneration generation = new UniqueValueGeneration();
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        for (int i = 0; i < nodes.getLength(); i++) 
        {
            org.w3c.dom.Node node = nodes.item(i);
            switch (node.getNodeType()) {
            case org.w3c.dom.Node.CDATA_SECTION_NODE:
                break;
                
            case org.w3c.dom.Node.ELEMENT_NODE:
                org.w3c.dom.Element nodeElement = (org.w3c.dom.Element)node;
                if (nodeElement.getTagName().equals("generator-name")) 
                {
                    String appName = getGeneratorName(nodeElement);
                    generation.setGeneratorName(appName);
                }
                else if (nodeElement.getTagName().equals("name-column")) 
                {
                    String appName = getGeneratorName(nodeElement);
                    generation.setNameColumn(appName);
                }
		else if (nodeElement.getTagName().equals("generator-class"))
		{
			String genClass = getGeneratorName(nodeElement);
			generation.setGeneratorClass(genClass);
		}
                break;
            case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE:
                break;
            }
        }
        return generation;
    }

    private static DataDictionary getDataDictionary(java.net.URL url, DataDictionary dataDictionary, String ddXMLDir) throws Exception
    {
        if (url.getFile().endsWith(".xml"))
        {
            InputStream ddStream = url.openStream();
            DocumentBuilderFactory documentbuilderfactory = DocumentBuilderFactory.newInstance("com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl", Thread.currentThread().getContextClassLoader());
            //validating flag has to be set before the document builder formation otherwise
            //its really useless!!
            documentbuilderfactory.setValidating(true);

            DocumentBuilder documentbuilder = documentbuilderfactory.newDocumentBuilder();
            documentbuilder.setErrorHandler(new MetaDataErrorHandler());
            MetaDataEntityResolver mder = new MetaDataEntityResolver();
            mder.setDDXMLDir(ddXMLDir);
            documentbuilder.setEntityResolver(mder);

            org.w3c.dom.Document document = documentbuilder.parse(new InputSource(ddStream));

            DataDictionaryParser datadictionaryparser = new DataDictionaryParser(document, url.getFile());
            datadictionaryparser.parseDocument(dataDictionary);

            dataDictionary = datadictionaryparser.getDataDictionary();
        }
        return dataDictionary;
    }

    public static DataDictionary getDataDictionary(java.net.URL url) throws Exception
    {
        DataDictionary dataDictionary = null;
        if (!url.getFile().endsWith("dd-files.xml"))
        {
            dataDictionary = getDataDictionary(url, null, new File(url.getPath()).getParentFile().toString());
        }
        else
        {
            String moduleName = url.toString();
            moduleName = moduleName.substring(0, moduleName.lastIndexOf('/'));
            moduleName = moduleName.substring(moduleName.lastIndexOf('/') + 1);
            DataObject ddFilesDO = Xml2DoConverter.transform(url);
            Iterator iterator = ddFilesDO.getRows("ConfFile");
            while (iterator.hasNext())
            {
                Row row = (Row) iterator.next();
                String urlStr = (String) row.get("URL");
                String path = url.getPath();
                String confModulePath = path.substring(0, path.lastIndexOf('/')+1);
                urlStr = confModulePath + urlStr;
                URL tempUrl = new File(urlStr).toURL();
                dataDictionary = getDataDictionary(tempUrl, dataDictionary, new File(tempUrl.getPath()).getParentFile().toString());
            }
        }
        return dataDictionary;
    }

    static int getTextNodeValAsInt(org.w3c.dom.Element element)
    {
        String textNodeStr = getTextNodeVal(element);
        if(textNodeStr == null)
        {
            //This condition should not occur in a normal case
            return 0;
        }
        else
        {
            return (Integer.parseInt(textNodeStr.trim()));
        }
    }
    
    /* 
     * A utility method to get the text node value for the Element node given!. As most
     * of our XML defintions have TextNode form for getting the data. This method will be
     * very useful for us.
     */
    public static String getTextNodeVal(org.w3c.dom.Element element)
    {
        String nodeVal = null;
        // element.getValue();
        org.w3c.dom.NodeList nodes = element.getChildNodes();
        for (int i = 0; i < nodes.getLength(); i++) {
            org.w3c.dom.Node node = nodes.item(i);
            if(node.getNodeType()== org.w3c.dom.Node.TEXT_NODE)
            {
                // ((org.w3c.dom.Text)node).getData();
                org.w3c.dom.Text tNode = ((org.w3c.dom.Text)node);
                //System.out.println(" Node Value " + tNode.getData());
                //                    pc.setSuperClassName(tNode.getData());
                nodeVal = tNode.getData();
            }
        }
        return nodeVal;
    }

    static boolean getTextNodeValAsBoolean(org.w3c.dom.Element element)
    {
        String textNodeStr = getTextNodeVal(element);
        return ((textNodeStr != null) &&
                (textNodeStr.trim().equalsIgnoreCase("true")));
    }
    
    public static void main(String[] args) throws Exception{
    	
    	ArrayList<String> filesList = new ArrayList<String>();
    	filesList.add( "/Users/sathish-1343/eclipse/Eclipse.app/Contents/MacOS/ZIDE/deployment/ROOT/AdventNet/Sas/tomcat/webapps/ROOT/WEB-INF/conf/CustomView/data-dictionary.xml" );
    	filesList.add( "/Users/sathish-1343/eclipse/Eclipse.app/Contents/MacOS/ZIDE/deployment/ROOT/AdventNet/Sas/tomcat/webapps/ROOT/WEB-INF/conf/CustomView/data-dictionary.xml" );
    	filesList.add( "/Users/sathish-1343/eclipse/Eclipse.app/Contents/MacOS/ZIDE/ROOT/product_package/conf/AdventNetCRMSFA/data-dictionary.xml" );
    	
    	for ( String fileName : filesList )
    	{
            javax.xml.parsers.DocumentBuilderFactory builderFactory = javax.xml.parsers.DocumentBuilderFactory.newInstance();
            javax.xml.parsers.DocumentBuilder builder = builderFactory.newDocumentBuilder();
            org.w3c.dom.Document document = builder.parse(new org.xml.sax.InputSource(fileName));
            DataDictionaryParser scanner = new DataDictionaryParser(document);
            scanner.parseDocument();
    	}
    }
    
}
